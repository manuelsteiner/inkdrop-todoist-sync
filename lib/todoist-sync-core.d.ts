import { Label, Project, Section, Task, TodoistApi } from '@doist/todoist-api-typescript';
import type { Note, Book, Tag } from 'inkdrop-model';
export declare class TodoistSyncCore {
    private books;
    private notes;
    private tags;
    private todoistApi;
    private projects;
    private sections;
    private tasks;
    private labels;
    constructor(books: Book[], notes: Note[], tags: Tag[], todoistApi: TodoistApi, projects: Project[], sections: Section[], tasks: Task[], labels: Label[]);
    static construct(): Promise<TodoistSyncCore>;
    syncAll(): Promise<void>;
    syncSelected(): Promise<void>;
    importAllProjects(): Promise<void>;
    importSelectedProjects(): Promise<void>;
    private importProjects;
    private importProject;
    exportAllBooks(): Promise<void>;
    exportSelectedBooks(): Promise<void>;
    private exportBooks;
    private exportBook;
    private importTasks;
    private importTask;
    private importLabels;
    private importLabel;
    private importComments;
    private importComment;
    exportSelectedNotes(): Promise<void>;
    private exportNotes;
    private exportNote;
    private exportNoteToProjectWithName;
    private exportTags;
    private exportTag;
    private static getBooks;
    private getBook;
    private createBook;
    private createBookHierarchyToRoot;
    private static getNotes;
    private getNote;
    private createNote;
    private static getCompletedNotes;
    private static getDroppedNotes;
    private getSelectedNotes;
    private static getTags;
    private getTag;
    private createTag;
    private getBookById;
    private getBookByNameAndParent;
    private getRootBooks;
    private getSubBooks;
    private getBookNotes;
    private bookContainsNoteWithTitle;
    private getBookHierarchy;
    private getTrimmedNoteTitle;
    private noteCanBeExported;
    private getNoteTags;
    private noteHasSomeTags;
    private tagExists;
    private getTagsByNames;
    private getTagsFromString;
    private static getTodoistApi;
    private static getProjects;
    private createProject;
    private createProjectHierarchyToRoot;
    private static getSections;
    private createSection;
    private static getTasks;
    private createTask;
    private completeTask;
    private static getLabels;
    private createLabel;
    private getCommentsForProject;
    private getCommentsForTask;
    private projectExists;
    private getProjectById;
    private getProjectByName;
    private getProjectByNameAndParent;
    private getRootProjects;
    private getProjectHierarchyByBookHierarchy;
    private getSubProjects;
    private getProjectHierarchy;
    private getProjectTasks;
    private getProjectSubTasks;
    private getSectionsFromString;
    private getSectionsByNames;
    private getSectionById;
    private getSectionByName;
    private getSectionByNameAndProject;
    private getSectionTasks;
    private taskCanBeImported;
    private getSubTasks;
    private taskIsInAnySection;
    private getTaskLabels;
    private taskHasSomeLabels;
    private getLabelByName;
    private getLabelsByNames;
    private getLabelsFromString;
    private getTaskCommentString;
    private projectContainsSectionWithName;
    private projectContainsTaskWithContent;
    private labelExists;
    private static handleTodoistError;
}
